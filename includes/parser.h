/* ************************************************************************** */
/*                                                                            */
/*                                                                            */
/*   parser.h                                             ┌─┐┌┬┐┌┬┐┌─┐        */
/*                                                        │ │ │  │ │ │        */
/*   By: tblochet <tblochet@student.42.fr>                └─┘ ┴  ┴ └─┘        */
/*                                                        ┌┬┐┌─┐┌┬┐┌─┐        */
/*   Created: 2025/01/08 06:24:25 by tblochet             │││├─┤ │ ├─┤        */
/*   Updated: 2025/03/18 10:19:48 by tblochet             ┴ ┴┴ ┴ ┴ ┴ ┴        */
/*                                                                            */
/* ************************************************************************** */

#ifndef PARSER_H
# define PARSER_H
# include <lexer.h>
# include <libft.h>
# include <stdbool.h>
# include <utils.h>

typedef struct s_subcmd		t_subcmd;
typedef struct s_cmd		t_cmd;
typedef struct s_wredir		t_wredir;
typedef struct s_rredir		t_rredir;
typedef enum e_infile_mode	t_infile_mode;
typedef struct s_group		t_group;
typedef struct s_binary		t_binary;

enum						e_infile_mode
{
	MODE_FILE = 0,
	MODE_HEREDOC,
};

/**
 * @brief A subcommand.
 * A subcommand is any block of tokens between pipes, representing a binary
 * to execute and possibly pipe the input/output of.
 *
 */
struct						s_subcmd
{
	int						argc;
	t_list					*argv;
	t_wredir				*outfile;
	t_rredir				*infile;
	int						pipe[2];
	int						out_fd;
	int						in_fd;
};

/**
 * @brief A 'write' (meaning outward) reidrection for a subcommand
 *
 */
struct						s_wredir
{
	char					*to;
	int						append_mode;
};

/**
 * @brief A 'read' (meaning inward) redirection for a subcommand.
 */
struct						s_rredir
{
	char					*from;
	t_infile_mode			mode;
	int						heredoc;
	char					*heredoc_lim;
};

/**
 * @brief Command struct representing a user input from the shell.
 */
struct						s_cmd
{
	int						cmdc;
	t_list					*subs;
	int						pipe[2];
	pid_t					pids[256];
	bool					error;
};

struct						s_group
{
	t_gclist				*subs;
	t_token_list			*following;
};

struct						s_binary
{
	t_group					*left;
	t_token_type			operator;
	t_group					*right;
};

/**
 * @brief Creates a default subcommand
 * @return A pointer to the newly malloc'd subcommand struct
 */
t_subcmd					*scmd_create(void);

/**
 * @brief Inserts an argument in the argv of a subcommand
 * @param cmd targeted subcommand
 * @param arg argument to append
 */
void						scmd_insert_argument(t_subcmd *cmd, char *arg);

/**
 * @brief Creates a default command
 * @return A pointer to the newly malloc'd command struct
 */
t_cmd						*command(void);

/**
 * @brief Inserts a SUBCMD in the `subs` field of CMD
 * @param cmd target CMD
 * @param subcmd Subcommand to append
 */
void						insert_subcmd(t_cmd *cmd, t_subcmd *subcmd);

/**
 * @brief Expands tokens generated by the lexer.
 * This causes the environment variables to be replaced by their actual value.
 * @param tokens Linked list of tokens representing lexemes.
 */
void						expand_tokens(t_token_list *tokens);

/**
 * @brief Sets the inward redirection for a SUBCMD to FILE.
 * If FILE is NULL and IS_HEREDOC is set, then the inward redirection is set
 * to be a heredoc.
 * @param subcmd Subcommand to modify.
 * @param file File used for the redirection.
 * @param is_heredoc Boolean indicating if the redirection is a heredoc.
 */
void						scmd_set_infile(t_subcmd *cmd, char *file,
								int is_heredoc);

/**
 * @brief Sets the outward redirection for a SUBCMD to FILE with mode WMODE.
 * @param subcmd Subcommand to modify.
 * @param file File used for the redirection.
 * @param wmode Write mode to the file.
 */
void						scmd_set_outfile(t_subcmd *subcmd, char *file,
								int wmode);

/**
 * @brief Creates a subcommand from a list of tokens.
 * Those tokens are created by the lexer and represent various lexemes.
 * @param tokens Link list containing the tokens from the lexer
 * @return A pointer to the newly malloc'd subcommand struct
 */
t_subcmd					*scmd_create_from_tokens(t_token_list **tokens);

/**
 * @brief Free every allocated memory blocks in a SUBCMD
 * @param subcmd Subcommand to free
 */
void						scmd_destroy(t_subcmd *subcmd);

/**
 * @brief Parses a user's INPUT into a command struct
 * @param input raw user input from the command line
 * @return A pointer to the newly malloc'd command struct
 */
t_cmd						*command_from_user_input(char *input);
#endif
